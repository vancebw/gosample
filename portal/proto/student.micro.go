// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/student.proto

package gosample_srv_portal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for StudentService service

type StudentService interface {
	// 创建学生
	CreateStudent(ctx context.Context, in *Student, opts ...client.CallOption) (*Response, error)
	// 获取所有学生
	ListStudent(ctx context.Context, in *Request, opts ...client.CallOption) (*ListResponse, error)
	//获取学生
	GetById(ctx context.Context, in *StudentIdReq, opts ...client.CallOption) (*Student, error)
}

type studentService struct {
	c    client.Client
	name string
}

func NewStudentService(name string, c client.Client) StudentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gosample.srv.portal"
	}
	return &studentService{
		c:    c,
		name: name,
	}
}

func (c *studentService) CreateStudent(ctx context.Context, in *Student, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "StudentService.CreateStudent", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentService) ListStudent(ctx context.Context, in *Request, opts ...client.CallOption) (*ListResponse, error) {
	req := c.c.NewRequest(c.name, "StudentService.ListStudent", in)
	out := new(ListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentService) GetById(ctx context.Context, in *StudentIdReq, opts ...client.CallOption) (*Student, error) {
	req := c.c.NewRequest(c.name, "StudentService.GetById", in)
	out := new(Student)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StudentService service

type StudentServiceHandler interface {
	// 创建学生
	CreateStudent(context.Context, *Student, *Response) error
	// 获取所有学生
	ListStudent(context.Context, *Request, *ListResponse) error
	//获取学生
	GetById(context.Context, *StudentIdReq, *Student) error
}

func RegisterStudentServiceHandler(s server.Server, hdlr StudentServiceHandler, opts ...server.HandlerOption) error {
	type studentService interface {
		CreateStudent(ctx context.Context, in *Student, out *Response) error
		ListStudent(ctx context.Context, in *Request, out *ListResponse) error
		GetById(ctx context.Context, in *StudentIdReq, out *Student) error
	}
	type StudentService struct {
		studentService
	}
	h := &studentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&StudentService{h}, opts...))
}

type studentServiceHandler struct {
	StudentServiceHandler
}

func (h *studentServiceHandler) CreateStudent(ctx context.Context, in *Student, out *Response) error {
	return h.StudentServiceHandler.CreateStudent(ctx, in, out)
}

func (h *studentServiceHandler) ListStudent(ctx context.Context, in *Request, out *ListResponse) error {
	return h.StudentServiceHandler.ListStudent(ctx, in, out)
}

func (h *studentServiceHandler) GetById(ctx context.Context, in *StudentIdReq, out *Student) error {
	return h.StudentServiceHandler.GetById(ctx, in, out)
}
